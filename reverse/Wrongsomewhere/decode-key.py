stda= [ 0x8d, 0x55, 0x0a, 0x07, 0xa9, 0x5b, 0x1e, 0x16, 0x82, 0x77, 0x05, 0x10, 0xac, 0x55, 0x1f, 0x1c, 0xb8, 0x4e, 0x30, 0x24, 0xb7, 0x54, 0x08, 0x1c, 0xa9, 0x49, 0x30, 0x30, 0xab, 0x48, 0x1e, 0x16, 0xb0, 0x4e, 0x3a, 0x16, 0xac, 0x49, 0x05, 0x1c, 0xb0, 0x66, 0x3e, 0x06, 0xb0, 0x66, 0x23, 0x1d, 0xbb, 0x7e, 0x1e, 0x1a, 0xa8, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
to  = [ 0xde, 0x3a, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]

def _Z2opPc(param):
    # copie de sauvegarde pour conserver l'input
    param_1 = param[:]
  
    '''
    size_t sVar1;
    byte *local_18;
    int local_10;
    int local_c;
    '''
    '''
    sVar1 = len((char *)param_1);
    '''
    sVar1 = 0
    for b in param_1:
        if b == 0:
            break
        sVar1 += 1
    print(f'{sVar1 = }')
    print(f'{len(stda) = }')

    '''
    local_18 = param_1
    for (local_c = 0; (ulonglong)(longlong)local_c < sVar1; local_c += local_10) {
        for (local_10 = 0; (*local_18 != 0 && (local_10 < 4)); local_10 += 1) {
            *local_18 = *local_18 ^ (&to)[local_10];
            local_18 = local_18 + 1;
        }
    }
    '''
    pos = 0
    local_c = 0
    while local_c < sVar1:
        local_10 = 0
        while local_10 < 4 and param_1[pos] != 0:
            param_1[pos] ^= to[local_10]
            pos += 1
            local_10 +=1
        
        local_c += local_10
    
    return param_1

res_brut = _Z2opPc(stda)
res = ''.join([chr(c) for c in res_brut if c != 0 ])
print(f'HKEY = {res}')
